<Window x:Class="MazeApp.View.SettingsWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:MazeApp.View"
        mc:Ignorable="d"
        Title="SettingsWindow" 
        Width="800"
        SizeToContent="Height"
        WindowStartupLocation="CenterScreen"
        Topmost="True">
    <Window.Resources>
        <ResourceDictionary Source="/UIElements/UIElements.xaml"/>
    </Window.Resources>
    <Grid Name="baseGrid" Background="{DynamicResource BackgroundBrush}">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <Label Grid.Row ="0" Grid.Column="0" Style="{DynamicResource HeaderLabelStyle}"/>
        <Border Grid.Column="0" Grid.Row="0" BorderThickness="0 0 0 4">
            <Border.BorderBrush>
                <VisualBrush>
                    <VisualBrush.Visual>
                        <Rectangle StrokeDashArray="1 2" StrokeThickness="4"
                  Width="{Binding RelativeSource={RelativeSource AncestorType={x:Type Border}}, Path=ActualWidth}"
                  Height="{Binding RelativeSource={RelativeSource AncestorType={x:Type Border}}, Path=ActualHeight}">
                            <Rectangle.Stroke>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                    <GradientStop Color="{DynamicResource PlayerTwoColor}" Offset="0.0" />
                                    <GradientStop Color="{DynamicResource PlayerOneColor}" Offset="1.0" />
                                </LinearGradientBrush>
                            </Rectangle.Stroke>
                        </Rectangle>
                    </VisualBrush.Visual>
                </VisualBrush>
            </Border.BorderBrush>
        </Border>
        <Grid Grid.Row="1" Grid.Column="0">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>

            <StackPanel Grid.Column ="0" Orientation="Vertical" VerticalAlignment="Center" Margin="30 10">
                <TextBlock Text="Player name" Style="{StaticResource InputLabelStyle}"/>
                <TextBox Margin="0,5" Text="{Binding PlayerName, Mode=TwoWay}"/>
            </StackPanel>

            <StackPanel Grid.Row ="1" Orientation="Vertical" VerticalAlignment="Center" Margin="30 20 30 10">
                <TextBlock Text="Colour Theme" Style="{StaticResource InputLabelStyle}"/>
                <ComboBox Margin="0,5" ItemsSource="{Binding ColourThemeOptions}" SelectedItem="{Binding ColourTheme, Mode=TwoWay}"/>

            </StackPanel>

            <StackPanel Grid.Row ="2" Orientation="Vertical" VerticalAlignment="Center" Margin="30 10">
                <TextBlock Text="Maze Generation Algorithm" Style="{StaticResource InputLabelStyle}"/>
                <ComboBox  Margin="0,5" ItemsSource="{Binding GenerationAlgorithmOptions}" SelectedItem="{Binding Algorithm, Mode=TwoWay}"/>

            </StackPanel>

            <Grid Grid.Row ="3" VerticalAlignment="Center" Margin="30 10">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="1*" />
                    <ColumnDefinition Width="1*" />
                </Grid.ColumnDefinitions>
                <StackPanel Grid.Column ="0" Orientation="Vertical" VerticalAlignment="Center" Margin="0 0 5 0">
                    <TextBlock Text="Maze Width" Style="{StaticResource InputLabelStyle}"/>
                    <TextBox x:Name="widthBox" Margin="0,5">
                        <TextBox.Text>
                            <Binding Path="MazeWidth" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                <Binding.ValidationRules>
                                    <local:MazeDimensionValidator/>
                                </Binding.ValidationRules>
                            </Binding>
                        </TextBox.Text>
                        <Validation.ErrorTemplate>
                            <ControlTemplate>
                                <StackPanel>
                                    <AdornedElementPlaceholder/>
                                    <TextBlock Text="{Binding [0].ErrorContent}" Foreground="Red"/>
                                </StackPanel>
                            </ControlTemplate>
                        </Validation.ErrorTemplate>
                    </TextBox>
                </StackPanel>
                <StackPanel Grid.Column ="1" Orientation="Vertical" VerticalAlignment="Center" Margin="5 0 0 0">
                    <TextBlock Text="Maze Height" Style="{StaticResource InputLabelStyle}"/>
                    <TextBox Margin="0,5" x:Name="heightBox">
                        <TextBox.Text>
                            <Binding Path="MazeHeight" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                <Binding.ValidationRules>
                                    <local:MazeDimensionValidator/>
                                </Binding.ValidationRules>
                            </Binding>
                        </TextBox.Text>
                        <Validation.ErrorTemplate>
                            <ControlTemplate>
                                <StackPanel>
                                    <AdornedElementPlaceholder/>
                                    <TextBlock Text="{Binding [0].ErrorContent}" Foreground="Red"/>
                                </StackPanel>
                            </ControlTemplate>
                        </Validation.ErrorTemplate>
                    </TextBox>
                </StackPanel>
            </Grid>

            <StackPanel Grid.Row ="5" Orientation="Vertical" VerticalAlignment="Center" Margin="30 10">
                <CheckBox FontFamily="Segoe UI" FontSize="10pt" Margin="0,5"  Foreground="{DynamicResource ForegroundBrush}" Content="Limited visibility mode" IsChecked="{Binding IsLimitedVisibility, Mode=TwoWay}"/>
            </StackPanel>

            <Button Grid.Row ="6" Content="Save" Command="{Binding UpdateSettingsCommand}" CommandParameter="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}}}" Width="100px" HorizontalAlignment="Center" Margin="10 0 10 30">
                <Button.Style>
                    <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                        <Setter Property="IsEnabled" Value="True"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Path=(Validation.HasError), ElementName=widthBox}" Value="True">
                                <Setter Property="IsEnabled" Value="False"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Path=(Validation.HasError), ElementName=heightBox}" Value="True">
                                <Setter Property="IsEnabled" Value="False"/>
                            </DataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding Path=(Validation.HasError), ElementName=widthBox}" Value="False"/>
                                    <Condition Binding="{Binding Path=(Validation.HasError), ElementName=heightBox}" Value="False"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="IsEnabled" Value="True"/>
                            </MultiDataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
            </Button>
        </Grid>
    </Grid>
</Window>
